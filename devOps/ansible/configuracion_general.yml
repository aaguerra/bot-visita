---
- hosts: all
  become: yes
  become_method: sudo
  vars_files:
    - vars.yml
  vars:
    ansible_user : "{{ sshUsername }}"
    ansible_ssh_private_key_file: "{{ keyRoot }}"
    ansible_port: "{{ ansiblePort }}"
    docker_version: "5:18.09.6~3-0~ubuntu-bionic"
    angel_ssh_puplic_key_file: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGIIk1o6j2T5UfzzG3HUi5srb1Ud8K9AxUSz3mZqpKAt Generated by Maquina@DESKTOP-RPFV1TP.'
    angel_password: '$1$SomeSalt$rXxjGPqInzJ3JcZgwedJn0'
    angel_user: 'angel'
    johan_user: 'johan'
    johan_password: '$1$SomeSalt$6G/y5.0L5wAQ/bXFfsROM/'
    johan_ssh_puplic_key_file: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFLK6Mr76Y+D8yCHPwPQqmdr8ewmcG1D7xJuPgAkfEVZ johan'
  tasks:
  # creando los usuarios del sistema
  - name: Add a new sudo user named "{{ angel_user }}"
    user:
      name: "{{ angel_user }}"
      shell: /bin/bash
      password: "{{ angel_password }}"
      groups: # Empty by default, here we give it some groups
        - sudo
  - name: Add a new sudo user named "{{ johan_user }}"
    user:
      name: "{{ johan_user }}"
      shell: /bin/bash
      password: "{{ johan_password }}"
      groups: # Empty by default, here we give it some groups
        - sudo
  - name: Creates directory .ssh user
    file:
      path: '/home/{{ item }}/.ssh'
      state: directory
      owner: "{{ item  }}"
      group: "{{ item }}"
      mode: 0700
      recurse: yes
    loop:
      - "{{ angel_user }}"
      - "{{ johan_user }}"
  - name: Set authorized key in alternate location "{{ angel_user }}"
    authorized_key:
      user: "{{ angel_user }}"
      state: present
      key: "{{ angel_ssh_puplic_key_file }}"
      path: '/home/{{ angel_user }}/.ssh/authorized_keys'
      manage_dir: False
  - name: Set authorized key in alternate location "{{ johan_user }}"
    authorized_key:
      user: "{{ johan_user }}"
      state: present
      key: "{{ johan_ssh_puplic_key_file }}"
      path: '/home/{{ johan_user }}/.ssh/authorized_keys'
      manage_dir: False
  - name: Ansible delete file /etc/ssh/ssh_host_rsa_key
    file:
      path: /etc/ssh/ssh_host_rsa_key
      state: absent
  - name: Generate /etc/ssh/ RSA host key
    command: ssh-keygen -q -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -C "" -N ""
    args:
      creates: /etc/ssh/ssh_host_rsa_key
  #- name: Generate /etc/ssh/ DSA host key
  #  command: ssh-keygen -q -t dsa -f /etc/ssh/ssh_host_dsa_key -C "" -N ""
  #  args:
  #    creates: /etc/ssh/ssh_host_dsa_key
  #- name: Ansible delete file /etc/ssh/ssh_host_ecdsa_key
  #  file:
  #    path: /etc/ssh/ssh_host_ecdsa_key
  #    state: absent
  - name: Generate /etc/ssh/ ECDSA host key
    command: ssh-keygen -q -t ecdsa -b 521 -f /etc/ssh/ssh_host_ecdsa_key -C "" -N ""
    args:
      creates: /etc/ssh/ssh_host_ecdsa_key
  - name: Ansible delete file /etc/ssh/ssh_host_ed25519_key
    file:
      path: /etc/ssh/ssh_host_ed25519_key
      state: absent
  - name: Generate /etc/ssh/ ed25519 host key
    command: ssh-keygen -q -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -C "" -N ""
    args:
      creates: /etc/ssh/ssh_host_ed25519_key
  # habilitando el firewal para las configuraciones posteriores y permitiendo el puerto por defecto 22 para ssh
  - name: Allow everything and enable UFW
    ufw:
      state: enabled
      policy: allow
  - name: Set logging UFW
    ufw:
      logging: on
  - name: Allow all access to tcp port 22
    ufw:
      rule: limit
      proto: tcp
      #src: "{{ ipOffice }}"
      port: 22
      comment: ssh port
  - name: Run the equivalent of "apt-get update" Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    apt:
      update_cache: yes
      cache_valid_time: 3600
  - name: Upgrade all packages to the latest version
    apt:
      name: "*"
      state: latest
    # instala cion de docker
  - name: Allow all access to tcp port 2377
    ufw:
      rule: allow
      proto: tcp
      port: 2377
      comment: for cluster management communications
  - name: Allow all access to tcp port 3000
    ufw:
      rule: allow
      proto: tcp
      port: 3000
      comment: docker swarm endpoint
  - name: Allow all access to tcp port 7946
    ufw:
      rule: allow
      port: 7946
      comment: for container network discovery
  - name: Allow all access to tcp port 4789
    ufw:
      rule: allow
      proto: udp
      port: 4789
      comment: for the container ingress network.
  - name: Run the equivalent of "apt-get update" Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    apt:
      update_cache: yes
      cache_valid_time: 3600
  - name: Upgrade all packages to the latest version
    apt:
      name: "*"
      state: latest
  #  referencia git https://github.com/nickjj/ansible-docker/blob/master/defaults/main.yml
  - name: ensure old versions of docker are purged 1
    apt:
      name: lxc-docker
      state: absent
      purge: yes
    when: ansible_distribution == "Ubuntu"

  - name: ensure old versions of docker are purged 2
    apt:
      name: docker
      state: absent
      purge: yes
    when: ansible_distribution == "Ubuntu"

  - name: ensure old versions of docker are purged 3
    apt:
      name: docker-engine
      state: absent
      purge: yes
    when: ansible_distribution == "Ubuntu"

  - name: ensure old versions of docker are purged 4
    apt:
      name: docker.io
      state: absent
      purge: yes
    when: ansible_distribution == "Ubuntu"
  - name: ensure old versions of docker are purged 5
    apt:
      name: containerd
      state: absent
      purge: yes
    when: ansible_distribution == "Ubuntu"
  - name: ensure old versions of docker are purged 6
    apt:
      name: runc
      state: absent
      purge: yes
    when: ansible_distribution == "Ubuntu"
  - name: Install a list of packages Install Docker's dependencies
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
  - name: Add Docker's public PGP key to the APT keyring
    apt_key:
      url: 'https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg'
      state: present
  - name: add docker repository
    apt_repository:
      repo: 'deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} stable'
      state: present
    when: ansible_distribution == "Ubuntu"
  - name: update url de repositorios
    apt:
      update_cache: yes
      cache_valid_time: 3600
  - name: Upgrade all packages to the latest version
    apt:
      name: "*"
      state: latest

  - name: Install Docker-ce
    apt:
      name: "docker-ce={{ docker_version }}"
      #state: "{{ docker__state }}"
  - name: Install docker-ce-cli
    apt:
      name: "docker-ce-cli={{ docker_version }}"
      #state: "{{ docker__state }}"
  - name: Install containerd.io
    apt:
      name: "containerd.io"
      #state: "{{ docker__state }}"
  #  add user to Docker Group
  - name: add user to docker group
    user:
      name: "{{ item }}"
      groups: docker
      append: yes
    loop:
      - "{{ angel_user }}"
      - "{{ johan_user }}"
  - name: restart docker service
    service:
      name: docker
      state: started
